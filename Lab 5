1. Проаналізувати приклад універсального відношення. З'ясувати які його колонки містять надлишкові дані. Виконати нормалізацію універсального відношення, розбивши його на кілька таблиць.
Мета нормалізації даних полягає у тому, щоб розділити дані на окремі таблиці так, щоб кожен запис був унікальним, і щоб уникнути повторення інформації.
 Книги: Таблиця, що містить дані про книги, без повторюваних даних.
 Видавництва: Таблиця, що містить дані про видавництва.
 Теми: Таблиця, що містить дані про теми книг.
 Категорії: Таблиця, що містить дані про категорії книг.

2. Скласти SQL-script, що виконує:
A) Створення таблиць бази даних. Команди для створення таблиці повинні містити головний ключ, обмеження типу null / not null, default, check, створення зв'язків з умовами посилальної цілісності
    CREATE TABLE Books (
    ID INT PRIMARY KEY,
    Code INT,
    New VARCHAR(3),
    Name VARCHAR(255),
    Price DECIMAL(10, 2),
    Pages INT,
    Format VARCHAR(20),
    Date DATE,
    Circulation INT,
    PublishingHouseID INT, 
    TopicID INT, 
    CategoryID INT );

    CREATE TABLE PublishingHouses (
    ID INT PRIMARY KEY,
    Name VARCHAR(255));

    CREATE TABLE Topics (
    ID INT PRIMARY KEY,
    Name VARCHAR(255));

    CREATE TABLE Categories (
    ID INT PRIMARY KEY,
    Name VARCHAR(255));

B) Завантаження даних в таблиці
INSERT INTO `PublishingHouses` (ID, Name)
VALUES
    (1, 'Видавнича група BHV'),
    (2, 'Вільямс'),
    (3, 'МикроАрт'),
    (4, 'ДМК'),
    (5, 'Триумф'),
    (6, 'Эком'),
    (7, 'DiaSoft'),
    (8, 'Києво Могилянська академія'),
    (9, 'Університет "Україна"'),
    (10, 'Вінниця: ВДТУ'),
    (11, 'Print2print'),
    (12, 'Дім Химер');

INSERT INTO `topics` (ID, Name)
VALUES
    (1, 'Використання ПК в цілому'),
    (2, 'Операційні системи'),
    (3, 'Програмування'),
    (4, 'Трилер');
   
INSERT INTO `categories`(ID, Name)
VALUES
    (1, 'Підручники'),
    (2, 'Апарати засоби ПК'),
    (3, 'Інші книги'),
    (4, 'Windows 2000'),
    (5, 'Linux'),
    (6, 'Unix'),
    (7, 'Інші операційні системи'),
    (8, 'C&C++'),
    (9, 'SQL');
   
INSERT INTO Books (ID, Code, New, Name, Price, Pages, Format, Date, Circulation, PublishingHouseID, TopicID, CategoryID)
VALUES
    (2, 5110, 'No', 'Апаратні засоби мультимедіа. Відеосистема РС', 15.51, 400, '70x100/16', '2000-07-24', 5000, 1, 1, 1),
    (8, 4985, 'No', 'Засвой самостійно модернізацію та ремонт ПК за 24 години, 2-ге вид', 18.90, 288, '70x100/16', '2000-07-07', 5000, 2, 1, 1),
    (9, 5141, 'No', 'Структури даних та алгоритми', 37.80, 384, '70x100/16', '2000-09-29', 5000, 2, 1, 1),
    (20, 5127, 'No', 'Автоматизація інженерно-графічних робіт', 11.58, 256, '70x100/16', '2000-06-15', 5000, 1, 1, 1),
    (31, 5110, 'No', 'Апаратні засоби мультимедіа. Відеосистема Pc', 15.51, 400, '70x100/16', '2000-07-24', 5000, 1, 1, 2),
    (46, 5199, 'No', 'Залізо IBM 2001', 30.07, 368, '70x100/16', '2000-12-02', 5000, 3, 1, 2),
    (58, 3932, 'No', 'Як перетворити персональний комп\'ютер \r\nна вимірювальний комплекс', 7.65, 144, '60x88/16', '1999-06-09', 5000, 4, 1, 3),
    (59, 4713, 'No', 'Plug-ins. Додаткові програми для музичних \r\nпрограм', 11.41, 144, '70x100/16', '2000-02-22', 5000, 4, 1, 3),
    (175, 5217, 'No', 'Windows МЕ. Найновіші версії програм', 16.57, 320, '70x100/16', '2000-08-25', 5000, 5, 2, 4),
    (176, 4829, 'No', 'Windows 2000 Professional крок за кроком з \r\nCD', 27.25, 320, '70x100/16', '2000-04-28', 5000, 6, 2, 4),
    (188, 5170, 'No', 'Linux версії', 24.43, 346, '84x100/16', '2000-09-29', 5000, 4, 2, 5),
    (191, 860, 'No', 'Операційна система UNIX', 3.50, 395, '84x100\\16', '1997-05-05', 5000, 1, 2, 6),
    (203, 44, 'No', 'Відповіді на актуальні запитання щодо OS/2 Warp', 5.00, 352, '60x84/16', '1996-03-20', 5000, 7, 2, 7),
    (206, 5176, 'No', 'Windows Ме. Супутник користувача', 12.79, 306, '', '2000-10-10', 5000, 1, 2, 7),
    (209, 5462, 'No', ' Мова програмування С++. Лекції та вправи ', 29.00, 652, '84x100/16', '2000-12-12', 5000, 7, 3, 8),
    (210, 4982, 'No', 'Мова програмування С. Лекції та вправи ', 29.00, 432, '84x100/16', '2000-07-12', 5000, 7, 3, 8),
    (220, 4687, 'No', 'Ефективне використання C++ .50 \r\nрекомендацій щодо покращення ваших \r\nпрограм та проектів ', 17.60, 240, '70x100/16', '2000-02-03', 5000, 4,3,8),
    (222, 235, 'Yes', 'Інформаційні системи і структури даних ', 0.00, 288, '60х90/16 ', '2024-03-19', 400, 8, 1, 3),
    (225, 8746, 'Yes', 'Бази даних в інформаційних системах', NULL, 418, '60x84/16', '2018-07-25', 100, 9, 3, 9),
    (226, 2154, 'Yes', 'Сервер на основі операційної системи FreeBSD 6.1\r\n', NULL, 216, '60x84/16', '2015-03-11', 500, 9, 3, 7),
    (245, 2662, 'No', 'Організація баз даних та знань ', 0.00, 208, '60x90/16', '2001-10-10', 1000, 10, 3, 9),
    (247, 5641, 'Yes', ' Організація баз даних та знань ', 0.00, 384, '70x100/16', '2021-12-15', 5000, 1, 3, 9),
    (265, 4771, 'Yes', 'Хакінг. Мистецтво експлойта, 2-е видання', 11.66, 494, '165х235', '2018-02-11', 1500, 11, 3, 3),
    (500, 17238, 'Yes', 'Усі їхні демони', 5.15, 208, '84х108/32', '2020-03-04', 2000, 12, 4, 3); 

3. Побудувати діаграму зв'язків таблиць бази даних використовуючи інструмент Designer.

5. Створити і перевірити представлення для отримання універсального відношення з набору нормалізованих таблиць бази даних.
А)
CREATE VIEW UniversalRelation AS
SELECT 
    b.ID AS BookID,
    b.Code AS BookCode,
    b.New AS IsNew,
    b.Name AS BookName,
    b.Price AS BookPrice,
    b.Pages AS BookPages,
    b.Format AS BookFormat,
    b.Date AS PublicationDate,
    b.Circulation AS Circulation,
    ph.Name AS PublishingHouse,
    t.Name AS Topic,
    c.Name AS Category
FROM
    Books b
JOIN
    PublishingHouses ph ON b.PublishingHouseID = ph.ID
JOIN
    Topics t ON b.TopicID = t.ID
JOIN
    Categories c ON b.CategoryID = c.ID;

B) SELECT * FROM UniversalRelation;
